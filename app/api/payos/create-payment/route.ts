import { NextResponse } from "next/server";
import PayOS from "@payos/node";
import { absoluteUrl } from "@/lib/utils";
import { auth } from "@clerk/nextjs/server"; // ‚úÖ L·∫•y userId t·ª´ Clerk
import db from "@/db/drizzle";
import { userSubscriptionPayOS } from "@/db/schema";
import { eq } from "drizzle-orm";

const payOS = new PayOS(
  process.env.PAYOS_CLIENT_ID!,
  process.env.PAYOS_API_KEY!,
  process.env.PAYOS_CHECKSUM_KEY!
);

export async function POST(req: Request) {
  try {
    const { orderCode, amount, description } = await req.json();
    const { userId } = await auth(); // ‚úÖ L·∫•y userId t·ª´ Clerk

    if (!userId) {
      console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y userId!");
      return NextResponse.json({ success: false, error: "Unauthorized" }, { status: 401 });
    }

    console.log("üìå [API] Nh·∫≠n request t·∫°o thanh to√°n:", { userId, orderCode, amount, description });

    // ‚úÖ Ki·ªÉm tra xem user ƒë√£ c√≥ b·∫£n ghi subscription ch∆∞a
    const existingSubscription = await db.query.userSubscriptionPayOS.findFirst({
      where: eq(userSubscriptionPayOS.userId, userId),
    });

    if (existingSubscription) {
      console.log("üîÑ User ƒë√£ c√≥ subscription, c·∫≠p nh·∫≠t orderCode...");
      await db.update(userSubscriptionPayOS)
        .set({ orderCode, status: "PENDING" }) // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        .where(eq(userSubscriptionPayOS.userId, userId));
    } else {
      console.log("üÜï T·∫°o subscription m·ªõi...");
      await db.insert(userSubscriptionPayOS).values({
        userId,
        orderCode,
        status: "PENDING", // Ch∆∞a thanh to√°n
        priceId: "UNLIMITED_HEARTS",
        transactionId: null, // ‚úÖ ƒê·ªÉ tr·ªëng v√¨ ch∆∞a c√≥ giao d·ªãch
        currentPeriodEnd: null, // ‚úÖ ƒê·ªÉ tr·ªëng v√¨ ch∆∞a c√≥ h·∫°n s·ª≠ d·ª•ng
      });
    }

    const body = {
      orderCode,
      amount,
      description,
      items: [{ name: "N√¢ng c·∫•p t√†i kho·∫£n VIP", quantity: 1, price: amount }],
      cancelUrl: absoluteUrl("/shop"),
      returnUrl: absoluteUrl("/shop"),
      embedded: false, // Kh√¥ng d√πng iframe
    };

    console.log("üöÄ [API] G·ª≠i request ƒë·∫øn PayOS:", body);
    const response = await payOS.createPaymentLink(body);
    console.log("‚úÖ [API] Ph·∫£n h·ªìi t·ª´ PayOS:", response);

    return NextResponse.json({ success: true, data: response });

  } catch (error: any) {
    console.error("‚ùå [API] L·ªói khi t·∫°o link thanh to√°n:", error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}
