import { createHmac } from "crypto";
import { NextResponse } from "next/server";
import db from "@/db/drizzle";
import { userSubscriptionPayOS } from "@/db/schema";
import { eq } from "drizzle-orm";

const CHECKSUM_KEY = process.env.PAYOS_CHECKSUM_KEY!; // üîë L·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

// H√†m s·∫Øp x·∫øp c√°c key trong object theo th·ª© t·ª± alphabet
function sortObjDataByKey(object: any) {
  return Object.keys(object)
    .sort()
    .reduce((obj: any, key: string) => {
      obj[key] = object[key];
      return obj;
    }, {});
}

// H√†m chuy·ªÉn object th√†nh query string
function convertObjToQueryStr(object: any) {
  return Object.keys(object)
    .filter((key) => object[key] !== undefined)
    .map((key) => {
      let value = object[key];

      // N·∫øu gi√° tr·ªã l√† m·ªôt m·∫£ng, s·∫Øp x·∫øp t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng
      if (value && Array.isArray(value)) {
        value = JSON.stringify(value.map((val) => sortObjDataByKey(val)));
      }

      // N·∫øu gi√° tr·ªã l√† null ho·∫∑c undefined, thay b·∫±ng chu·ªói r·ªóng
      if ([null, undefined, "undefined", "null"].includes(value)) {
        value = "";
      }

      return `${key}=${value}`;
    })
    .join("&");
}

// H√†m ki·ªÉm tra ch·ªØ k√Ω webhook
function isValidSignature(data: any, receivedSignature: string): boolean {
  const sortedData = sortObjDataByKey(data); // S·∫Øp x·∫øp data theo th·ª© t·ª± alphabet
  const queryStr = convertObjToQueryStr(sortedData); // Chuy·ªÉn th√†nh query string
  const computedSignature = createHmac("sha256", CHECKSUM_KEY) // T·∫°o ch·ªØ k√Ω HMAC SHA-256
    .update(queryStr)
    .digest("hex");

  return computedSignature === receivedSignature; // So s√°nh ch·ªØ k√Ω
}

// API x·ª≠ l√Ω webhook t·ª´ PayOS
export async function POST(req: Request) {
  try {
    const payload = await req.json();
    console.log("üìå Nh·∫≠n webhook t·ª´ PayOS:", payload);

    const { code, desc, success, data, signature } = payload;

    // Ki·ªÉm tra ch·ªØ k√Ω c·ªßa webhook
    if (!isValidSignature(data, signature)) {
      console.error("‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá!");
      return NextResponse.json({ success: false, error: "Invalid signature" }, { status: 400 });
    }

    console.log("‚úÖ Ch·ªØ k√Ω h·ª£p l·ªá, ti·∫øp t·ª•c x·ª≠ l√Ω...");

    const { orderCode, amount, description, paymentLinkId, code: status } = data;

    // Ki·ªÉm tra xem orderCode c√≥ trong DB kh√¥ng
    const existingSubscription = await db.query.userSubscriptionPayOS.findFirst({
      where: eq(userSubscriptionPayOS.orderCode, orderCode),
    });

    if (!existingSubscription) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y orderCode trong database!");
      return NextResponse.json({ success: false, error: "Order kh√¥ng t·ªìn t·∫°i" }, { status: 400 });
    }

    const userId = existingSubscription.userId;
    console.log("‚úÖ ƒê√£ t√¨m th·∫•y orderCode trong DB, userId:", userId);

    if (status === "00") { // Tr·∫°ng th√°i "00" nghƒ©a l√† ƒë√£ thanh to√°n th√†nh c√¥ng
      console.log("üîÑ C·∫≠p nh·∫≠t subscription cho user:", userId);
      await db.update(userSubscriptionPayOS)
        .set({
          status: "PAID",
        })
        .where(eq(userSubscriptionPayOS.orderCode, orderCode));

      console.log("‚úÖ Subscription ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      return NextResponse.json({ success: true });
    } else {
      console.warn("‚ö†Ô∏è Thanh to√°n kh√¥ng th√†nh c√¥ng, tr·∫°ng th√°i:", status);
      return NextResponse.json({ success: false, error: "Thanh to√°n th·∫•t b·∫°i." });
    }
  } catch (error: any) {
    console.error("‚ùå L·ªói Webhook:", error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}
