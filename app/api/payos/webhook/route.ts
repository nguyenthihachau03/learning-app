import { NextResponse } from "next/server";
import db from "@/db/drizzle";
import { userSubscriptionPayOS } from "@/db/schema";
import { eq } from "drizzle-orm";

export async function POST(req: Request) {
    try {
        const payload = await req.json();
        console.log("üìå Nh·∫≠n webhook t·ª´ PayOS:", payload);

        const { orderCode, status, transactionId } = payload;

        // ‚úÖ Ki·ªÉm tra `orderCode` trong DB
        const existingSubscription = await db.query.userSubscriptionPayOS.findFirst({
            where: eq(userSubscriptionPayOS.orderCode, orderCode),
        });

        if (!existingSubscription) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y orderCode trong database!");
            return NextResponse.json({ success: false, error: "Order kh√¥ng t·ªìn t·∫°i" }, { status: 400 });
        }

        const userId = existingSubscription.userId; // ‚úÖ L·∫•y userId t·ª´ DB

        if (status === "PAID") {
            const currentPeriodEnd = new Date();
            currentPeriodEnd.setMonth(currentPeriodEnd.getMonth() + 1); // ‚úÖ Th√™m 1 th√°ng

            console.log("üîÑ C·∫≠p nh·∫≠t subscription cho user:", userId);
            await db.update(userSubscriptionPayOS)
                .set({
                    status: "PAID",
                    currentPeriodEnd: currentPeriodEnd, // ‚úÖ C·∫≠p nh·∫≠t ng√†y h·∫øt h·∫°n
                    transactionId: transactionId ?? "UNKNOWN", // ‚úÖ X·ª≠ l√Ω n·∫øu `transactionId` b·ªã `null`
                })
                .where(eq(userSubscriptionPayOS.userId, userId));

            console.log("‚úÖ Subscription ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
            return NextResponse.json({ success: true });
        } else {
            console.warn("‚ö†Ô∏è Thanh to√°n kh√¥ng th√†nh c√¥ng, tr·∫°ng th√°i:", status);
            return NextResponse.json({ success: false, error: "Thanh to√°n th·∫•t b·∫°i." });
        }
    } catch (error: any) {
        console.error("‚ùå L·ªói Webhook:", error);
        return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }
}
